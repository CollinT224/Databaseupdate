Attribute VB_Name = "FindSpreedSheetSize2"
'Installation instructions to get the program to work.
'In VBA: Tools -> References -> mscorlib.dll check mark it. If it says an arraylist is not defined make sure this is checked.
'In Windows: Turn Windows features on or off. Enable  .NET Framework 3.5 (includes .Net 2.0 and 3.0)  This may require admin password. This lets the linked lists which the program relies on to function
'How To run it: Have three spreedsheets(FNumbersRValues, RNamesActive, Output) two of them following the format and one blank. Run the macro on the first spreedsheet that contains the Fnumbers and their corresponding Rvalues.
'Ensure fNumbersReal Class exists in the class modules folder
'How the program works:
'Outline FNumbersRValues Is provided by user in that approximite format to the program. A1 Needs to be left blank RNumbers and FNumbers can be unsorted.
'Outline RNamesActive Is provided by user in that format however, it can be adjusted by changing the IF statements to different columns.
'Outline Output is left empty by user and the data is generated by the program.
'What the Program does: It makes an array of Fnumber clases from FNumbersRValues and it also makes an array of Rnumber classes from Sheet4.
'It then takes the Rnumbers that are associated to each product in FNumbersRValues And multiplies them by the %Active in RNamesActive storing that value in the Fnumbers class.
'Finally it outputs the Fnumber of the product as well as the associated Rnumber Generic Names with their corresponding real value percentages.

Sub FindSpreedSheetSize2()
Application.ScreenUpdating = False


'below gets a range of the worksheet and stores it as currentRange
Dim ws As Worksheet
Set ws = ThisWorkbook.ActiveSheet
Dim currentRange As Range

Set currentRange = returnRange(ws)
Dim iNum As Interior

Dim ws2 As Worksheet
Set ws2 = ThisWorkbook.Worksheets("RNamesActive") 'target worksheet
Dim ws3 As Worksheet
Set ws3 = ThisWorkbook.Worksheets("Output") 'output worksheet
Dim LR2 As Long, LC2 As Long
LR2 = ws2.Cells(ws.Rows.Count, 1).End(xlUp).Row
LC2 = ws2.Cells(1, ws.Columns.Count).End(xlToLeft).Column
Dim LR3 As Long, LC3 As Long
LR3 = ws3.Cells(ws.Rows.Count, 1).End(xlUp).Row
LC3 = ws3.Cells(1, ws.Columns.Count).End(xlToLeft).Column
Debug.Print "TARGET SPREADSHEET ROW BY COLUMN "; LR2; LC2

'below gets the amount of cells in the range of the worksheet empty cells included it does the math based off of the amount of 1st columns times the amount in the 1st row
Dim cellCount As Double 'JCS changed from integer
 cellCount = returnCount(ws)
Debug.Print "Return Count: " & cellCount


' selects rangeif I want
Dim LR As Long, LC As Long
'Dim tempRange As Range
LR = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
LC = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column

Dim counter As Integer
ReDim arrayAmount(LR, LC) As Variant
counter = 0

For k = 2 To LR
    
       For i = 1 To LC
           'Debug.Print ws.Cells(k, i)
           arrayAmount((k - 2), i) = ws.Cells(k, i)
           'arrayAmount(counter) = "Test" & counter
           'Debug.Print arrayAmount(k - 2, i) & "TEST"
           
      Next i

   Next k
   

    
'Debug.Print ws.Cells(1, 2)
   ' MAKES THE CLASS HERE
   ReDim fArray(LR) As fNumbersReal 'makes an array of f numbers
   
   
For i = 0 To UBound(arrayAmount, 1)
    For j = 1 To UBound(arrayAmount, 2)
        'If arrayAmount(i, j) Like "[A-Z]*" Then
        If j = 1 Then
        Debug.Print "Grab For New Dimension into the Array" & arrayAmount(i, j)
        Set fArray(i) = New fNumbersReal 'makes f number class you need Set to make an instance of a class
        Dim tempF As String
        tempF = arrayAmount(i, j)
        fArray(i).fNumber = tempF
        End If
        If IsNumeric(arrayAmount(i, j)) = True And arrayAmount(i, j) <> "" Then
        Debug.Print "find rnumber of "; arrayAmount(i, j)
        Dim tempVal As Double
        tempVal = arrayAmount(i, j)
        fArray(i).addValue tempVal
        Debug.Print "Stored " & tempVal & " As Value"
        Debug.Print "rnumber found is "; Cells(1, j)
        Dim tempR As String
        tempR = Cells(1, j)
        fArray(i).addStorage tempR
        Debug.Print "Stored " & tempR & " As RNumber"
        End If


    Next j
Next i

   
   ' GENERAL TESTING STATEMENTS BELOW
   ''''''''''''''''''''''''''''''''''''
  'Set R = fArray(2).storageList
  'Set valueAmount = fArray(2).valueList
  'Debug.Print R(0); "RNumber"; fArray(2).fNumber
  'Debug.Print R(1)
  'Debug.Print valueAmount(0)
  'Debug.Print valueAmount(1)
  'Set TESTER = fArray(0).storageList
 
  'Call printList(R)
  'Call printList(valueAmount)
''''''''''''''''''''''''''''''''''''''
'''Above can be removed as you want
'
'Dim storeValue As Double
'Dim testString As String
'testString = "R1001"
'storeValue = returnRValue(R, valueAmount, testString)
'Debug.Print storeValue & " STORE VALUE FROM FUNCTION"
'
Dim iterator As Variant
Debug.Print fArray(3).fNumber; "HI"
Dim arraySize As Integer
arraySize = UBound(fArray) - LBound(fArray) - 2 ' I DON"T KNO
Debug.Print arraySize; "ARRAY SIZE"
Debug.Print UBound(fArray)
Debug.Print LBound(fArray)
'For i = 0 To arraySize
'    Debug.Print fArray(i).fNumber
'Next i
   
     
ReDim arrayAmount2(LR2, LC2) As Variant
counter = 0
ReDim rArrayPercentage(LR2) As fNumbersReal
For k = 2 To LR2
    
       For i = 1 To LC2
           'Debug.Print ws.Cells(k, i)
           arrayAmount2(k - 2, i) = ws2.Cells(k, i)
           
           
           Debug.Print arrayAmount2(k - 2, i) & " TEST2"
           
      Next i

   Next k
   
   'string filtering below in the array adding it to a class
   For i = 0 To UBound(arrayAmount2, 1)
    For j = 1 To UBound(arrayAmount2, 2)
        If j = 1 Then
                Set rArrayPercentage(i) = New fNumbersReal 'makes f number
                Dim tempR2 As String
                tempR2 = arrayAmount2(i, j)
                rArrayPercentage(i).rNumber = tempR2
                'Debug.Print arrayAmount2(i, j) & " ARRAY HERE"
                Dim tempRNumber As String
                tempRNumber = arrayAmount2(i, j)
                rArrayPercentage(i).addStorage tempRNumber
                
        ElseIf j = 3 Then
                Dim generic As String
                generic = arrayAmount2(i, j)
                rArrayPercentage(i).fNumber = generic
                'add list here
                
        ElseIf j = 4 Then
        
                Dim tempV2 As Double
                tempV2 = arrayAmount2(i, j)
                rArrayPercentage(i).addValue tempV2
                
        End If
   
   
    Next j
   Next i
   
   
''''''''''''''''''Testing That Can Be Removed''''''''''''
Set f = rArrayPercentage(1).storageList
Set valueAmount2 = rArrayPercentage(1).valueList
  'Debug.Print F(0); "RNumber"; rArrayPercentage(2).rNumber
 
Call printList(f)
Call printList(valueAmount2)

Dim storeValue2 As Double
Dim testString2 As String
testString2 = "R1001"
storeValue2 = returnRValue(f, valueAmount2, testString2)
Debug.Print storeValue2 & " STORE PERCENTAGE FROM FUNCTION"

Dim TotalActive As Double
TotalActive = storeValue2 * storeValue * 1 / 100
Debug.Print "TOTAL ACTIVE: " & TotalActive



'''''''''''''''Testing That Can Be Removed Above''''''''''''

''Gets the real percent active for each Rnumber corresponding to each Fnumber
arraySize2 = UBound(rArrayPercentage) - LBound(rArrayPercentage) - 2 ' I still don't know why it's -2
Debug.Print "ARRAY SIZE FOR SECOND ARRAY:" & arraySize2
'For i = 0 To arraySize2
'    Debug.Print rArrayPercentage(i).rNumber; "HERE"
'Next i
''Idea for each Rvalue in FArray Look at RValue
Dim counter2 As Integer 'not redimming 10x times
Dim tempName As String 'not redimming 10x times
For i = 0 To arraySize
    
    counter2 = 0
    'Debug.Print fArray(i).fNumber
    Set RValuesList = fArray(i).storageList
    Set RValueAmount = fArray(i).valueList
    'For j = 0 To fArray(i).storageList.Count - 1
     For j = 0 To arraySize2
        'Set RValueName = rArrayPercentage(counter2).storageList
        'Set RValuePercent = rArrayPercentage(counter2).valueList
        Set RValueName = rArrayPercentage(counter2).storageList
        tempName = RValueName.Item(0)
        If RValuesList.Contains(tempName) Then   'new lines
            Set RValuePercent = rArrayPercentage(counter2).valueList
            Dim tempDouble As Double
            tempDouble = RValuePercent.Item(0)
            If tempDouble <> 0 Then
                Dim storageDouble As Double
                storageDouble = returnRValue(RValuesList, RValueAmount, tempName)
            Else
            storageDouble = tempDouble
        
            End If
    
            Debug.Print "STORAGE: " & storageDouble
        
        
            If storageDouble <> 0 Then
                storageDouble = storageDouble * tempDouble * 1 / 100
                storageDouble = Format(storageDouble, "0.00")
                
                'Debug.Print "ADDING Value To New Class: " & storageDouble
                'rArrayPercentage(counter2).addValue storageDouble
            
                fArray(i).addPercentage storageDouble
                'Debug.Print "Checking: "; fArray(i).percentageList(0); " Percent List"
                Dim genNameTemp As String ''''' TESTING
                genNameTemp = rArrayPercentage(j).fNumber
        
                fArray(i).addGeneric genNameTemp
            End If
        End If ' new lines
        
        counter2 = counter2 + 1
    Next j
    
Next i
    
    For i = 2 To LR
        'assumption that base spreedsheet and target spreedsheet follow the format stated above
        ws3.Cells(i, 1) = fArray(i - 2).fNumber
        Dim printString As String
        printString = ""
        Debug.Print ws3.Cells(i, 1)
        'Debug.Print "THIS OCCURS"
        'set the Rnumber tracker variable to 0 here

            For j = 0 To fArray(i - 2).percentageList.Count - 1
                'Dim printString As String
                Debug.Print rArrayPercentage(j).fNumber & "  Name Print"
                'printString = printString & rArrayPercentage(j).fNumber & " " & rArrayPercentage(j).valueList(1) & Chr(10)
                Dim rString As String
                rString = fArray(i - 2).storageList(j)
                Debug.Print rString
                'printString = printString & rArrayPercentage(j).fNumber & " " & fArray(i - 2).percentageList(j) & Chr(10)
                'printString = printString & fArray(i - 2).genericList(j) & ": " & fArray(i - 2).percentageList(j) & "%" & Chr(10)
                If j <> fArray(i - 2).percentageList.Count - 1 Then
                    printString = printString & fArray(i - 2).genericList(j) & ": " & fArray(i - 2).percentageList(j) & "%" & Chr(10)
                Else
                    printString = printString & fArray(i - 2).genericList(j) & ": " & fArray(i - 2).percentageList(j) & "%"
                End If
                
                
                                
            Next j
            
        ws3.Cells(i, 2) = printString
        
        Debug.Print "Contents of Cells 3rd spreedsheet: " & ws3.Cells(i, 1)
        'ADDING the extra Rnumbers added here
        'Debug.Print ws3.Cells(i, 1)
        'ws3.Cells(i, 2) = rArrayPercentage(i - 2).fNumber
        'Debug.Print rArrayPercentage(i - 2).fNumber & "Added to Sheet"
    Next i
    
    
    ws3.Cells.EntireColumn.AutoFit
    ws3.Cells.EntireRow.AutoFit
    ''Formatting above
    ''''''Testing Output Here Can Remove''''''
    'Dim testtest As Variant
    Set testtest = fArray(0)
    Set testtest2 = fArray(1)
    Set testtest3 = rArrayPercentage(5)
    Dim testtest4 As String
    testtest4 = "R1002"
    Dim testtest5 As String
    testtest5 = rArrayPercentage(3).fNumber
    ''Testing Output Above Can Remove''''''
        
 '''''''''''''''''''''''''''''
 ' Below here is a new program idea that will update databases
 


' Main RP XLS database
'FSO requires references see Main Cleaner notes for instructions

Dim wsdata As Worksheet
Set wsdata = ThisWorkbook.Sheets("Main RP XLS")
Dim LCdatabase As Integer
Dim LRdatabase As Integer
LCdatabase = Range("A4").End(xlToRight).Column
LRdatabase = wsdata.Cells(wsdata.Rows.Count, 6).End(xlUp).Row
Dim FSO As New FileSystemObject
Set FSO = CreateObject("Scripting.FileSystemObject")
Set logfileRP = FSO.CreateTextFile(ThisWorkbook.Path & "\MainRPlog.txt")
logfileRP.WriteLine "Main RP XLS"


    Dim test As Variant
    'test = wsdata.Cells(4, 251)
    Dim sum As Variant
    Dim activesum As Variant
    Dim rnumbers As Boolean
    Dim compareF As String 'added
    Dim compareR As String 'added
    Dim counterFarray As Double
    Dim storagePointer As Integer
    'Dim arraySize() As String
    Dim sizecheck As Integer
    Dim addflag As Boolean
    Dim sizeincrease As Integer
    
  For k = 5 To wsdata.Cells(wsdata.Rows.Count, 6).End(xlUp).Row 'LRdatabase
  counter = 0
  sum = 0
  activesum = 0
  storagePointer = 0
  sizeincrease = 0
  rnumbers = False
  compareF = wsdata.Cells(k, 6)
    Do Until compareF = fArray(compareFarray).fNumber
        'Debug.Print "No Match"
        compareFarray = compareFarray + 1
    Loop
    sizecheck = fArray(compareFarray).storageList.Count
    ReDim arrayChecklist(sizecheck) As String
    For i = 1 To LCdatabase
        test = wsdata.Cells(4, i)
        If test Like "R?[0-9]*" Then 'regular expression
            'Debug.Print "RNumberSpotted"
            If storagePointer < fArray(compareFarray).storageList.Count And storagePointer < sizecheck Then
                If test = fArray(compareFarray).storageList(storagePointer) Then
                    Debug.Print "Inserting" & fArray(compareFarray).valueList(storagePointer)
                    logfileRP.WriteLine "Inserting: " & fArray(compareFarray).valueList(storagePointer) & " At:" & test & " For:" & compareF
                    wsdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                    'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                        'storagePointer = storagePointer + 1
                        addflag = True
                    'End If
                
                End If
                If test > fArray(compareFarray).storageList(storagePointer) And storagePointer < sizecheck Then
                    Debug.Print "Creating new R Number and Insert: "; fArray(compareFarray).storageList(storagePointer); "For Fnumber:"; compareF
                    logfileRP.WriteLine "Creating new R Number and Insert: " & fArray(compareFarray).storageList(storagePointer) & "For Fnumber:" & compareF
                    wsdata.Columns(i).Insert
                    wsdata.Cells(4, i) = fArray(compareFarray).storageList(storagePointer)
                    wsdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                    'sizeincrease = sizeincrease + 1
                    'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                        'storagePointer = storagePointer + 1
                        addflag = True
                    'End If
                End If
                If addflag = True Then
                    storagePointer = storagePointer + 1
                    
                End If
            addflag = False
            End If
            
            rnumbers = True
            If IsEmpty(wsdata.Cells(k, i)) = False And wsdata.Cells(k, i) <> " " And wsdata.Cells(k, i) <> "Yes" Then
                compareR = wsdata.Cells(4, i)
                
                'sumArray(counter) = wsdata.Cells(k, i + 1)
                'counter = counter + 1
                'sum = sum + wsdata.Cells(k, i)
            End If
            compareR = wsdata.Cells(4, i)
            If IsEmpty(wsdata.Cells(k, i)) = False And fArray(compareFarray).storageList.Contains(compareR) = False Then
                Debug.Print wsdata.Cells(4, i); "RNumber is outdated Erasing"; wsdata.Cells(k, i)
                logfileRP.WriteLine "Deleting Value: " & wsdata.Cells(k, i) & " RNumber:" & wsdata.Cells(4, i) & "Is no longer used by" & compareF
                wsdata.Cells(k, i) = ""
                'IsNumeric(wsdata.Cells(k, i))
            End If

        End If
        'If test = "" And rnumbers = True Then
            'Debug.Print "Active Spotted"
            'If IsEmpty(wsdata.Cells(k, i)) = False And wsdata.Cells(k, i) <> " " And wsdata.Cells(k, i) <> "Yes" Then
                'activesum = activesum + wsdata.Cells(k, i)
            'End If
        'End If
        
        
    Next i
    'Debug.Print "One Row Done"
    'wsdata.Cells(k, LCdatabase + 3) = sum * 100 & "%" ' +4 is the offset from the end of the last entry into the column
    'wsdata.Cells(k, LCdatabase + 4) = activesum * 100 & "%"
Next k


'Main Cleaner XLS
'Adding logfile requires you to enable Microsoft Scripting Runtime
Set wsdata = ThisWorkbook.Sheets("Main Cleaner XLS")
LCdatabase = Range("A2").End(xlToRight).Column
LRdatabase = wsdata.Cells(wsdata.Rows.Count, 6).End(xlUp).Row
Dim goFlag As Boolean

Set logfile = FSO.CreateTextFile(ThisWorkbook.Path & "\MainCleanerlog.txt")
logfile.WriteLine "Main Cleaner XLS"
'logfile.Close


For k = 3 To wsdata.Cells(wsdata.Rows.Count, 6).End(xlUp).Row 'LRdatabase
  counter = 0
  sum = 0
  activesum = 0
  storagePointer = 0
  sizeincrease = 0
  rnumbers = False
  goFlag = False
  compareF = wsdata.Cells(k, 6)
'  Do Until compareF = fArray(compareFarray).fNumber
'        'Debug.Print "No Match"
'        compareFarray = compareFarray + 1
'        If comapareF > fArray(compareFarray).fNumber Then
'        Debug.Print "ERROR PRODUCT NOT FOUND"
'        End If
'
'  Loop
'need to rewrite in case there isn't the Fnumber in the database
holderNumber = UBound(fArray) - LBound(fArray)
For j = 0 To holderNumber
    If compareF = fArray(j).fNumber Then
        compareFarray = j
        goFlag = True
    End If
    If compareF < fArray(j).fNumber And goFlag = False Then
        Debug.Print compareF & ":Not Found in the list skipping"
        logfile.WriteLine compareF & ":Not Found in the list skipping"
        GoTo skipFnumber
    End If
'compareFarray = holderNumber
'End If


' trya  goto statement if compareF is < fArray
Next j

  sizecheck = fArray(compareFarray).storageList.Count
  ReDim arrayChecklist(sizecheck) As String
  For i = 1 To LCdatabase
        test = wsdata.Cells(2, i)
        If test Like "R??[0-9]*" Then 'regular expression
            'Debug.Print "RNumberSpotted"
            If storagePointer < fArray(compareFarray).storageList.Count And storagePointer < sizecheck Then
                If test = fArray(compareFarray).storageList(storagePointer) Then
                    Debug.Print "Inserting " & fArray(compareFarray).valueList(storagePointer) & "At:" & test
                    logfile.WriteLine "Inserting: " & fArray(compareFarray).valueList(storagePointer) & " At:" & test & " For:" & compareF
                    wsdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                    'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                        'storagePointer = storagePointer + 1
                        addflag = True
                    'End If
                
                End If
                If test > fArray(compareFarray).storageList(storagePointer) And storagePointer < sizecheck Then
                    Debug.Print "Creating New R Number and Insert: "; fArray(compareFarray).storageList(storagePointer); "For Fnumber:"; compareF
                    logfile.WriteLine "Creating New R Number and Insert: " & fArray(compareFarray).storageList(storagePointer) & " At:" & test & " For:" & compareF
                    wsdata.Columns(i).Insert
                    wsdata.Cells(2, i) = fArray(compareFarray).storageList(storagePointer)
                    wsdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                    'sizeincrease = sizeincrease + 1
                    'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                        'storagePointer = storagePointer + 1
                        addflag = True
                    'End If
                End If
                If addflag = True Then
                    storagePointer = storagePointer + 1
                    
                End If
            addflag = False
            End If
            
            rnumbers = True
            If IsEmpty(wsdata.Cells(k, i)) = False And wsdata.Cells(k, i) <> " " And wsdata.Cells(k, i) <> "Yes" Then
                compareR = wsdata.Cells(2, i)
                
                'sumArray(counter) = wsdata.Cells(k, i + 1)
                'counter = counter + 1
                'sum = sum + wsdata.Cells(k, i)
            End If
            compareR = wsdata.Cells(2, i)
            If IsEmpty(wsdata.Cells(k, i)) = False And fArray(compareFarray).storageList.Contains(compareR) = False Then
                Debug.Print "Deleting: " & wsdata.Cells(k, i) & "RNumber is outdated"; wsdata.Cells(2, i) & "For Fnumber:" & compareF
                logfile.WriteLine "Deleting Value: " & wsdata.Cells(k, i) & " RNumber is outdated:" & wsdata.Cells(2, i) & " For Fnumber:" & compareF
                wsdata.Cells(k, i) = ""
                'IsNumeric(wsdata.Cells(k, i))
            End If

        End If
        'If test = "" And rnumbers = True Then
            'Debug.Print "Active Spotted"
            'If IsEmpty(wsdata.Cells(k, i)) = False And wsdata.Cells(k, i) <> " " And wsdata.Cells(k, i) <> "Yes" Then
                'activesum = activesum + wsdata.Cells(k, i)
            'End If
        'End If
        
        
    Next i
skipFnumber:
  'location of goto statement
  If k = 33 Then
    Debug.Print "Test"
  End If
  Debug.Print k
Next k



    Debug.Print sum & " Does The Program End?"
    
    logfile.Close
    Application.ScreenUpdating = True


'Main WS Sheet
'Adding logfile requires you to enable Microsoft Scripting Runtime
Set waterdata = ThisWorkbook.Sheets("Main WS Sheet")
LRdatabase = waterdata.Cells(wsdata.Rows.Count, 8).End(xlUp).Row
LCdatabase = waterdata.Range("C4").End(xlToRight).Column



Set logfileWS = FSO.CreateTextFile(ThisWorkbook.Path & "\MainWaterSolubleslog.txt")
logfileWS.WriteLine "Main Water Solubles"
'REMEMBER LOGFILE WS

For k = 5 To LRdatabase
'for something to k
  counter = 0
  sum = 0
  activesum = 0
  storagePointer = 0
  sizeincrease = 0
  rnumbers = False
  goFlag = False
  compareF = waterdata.Cells(k, 8)
  

  
  holderNumber = UBound(fArray) - LBound(fArray)
        For j = 0 To holderNumber
            If compareF = fArray(j).fNumber Then
                compareFarray = j
                goFlag = True
            End If
            If compareF < fArray(j).fNumber And goFlag = False Then
                Debug.Print compareF & ":Not Found in the list skipping"
                'If compareF <> 0 Then
                    logfileWS.WriteLine compareF & ":Not Found in the list skipping"
                'End If
                GoTo skipFnumberWS
            End If
        Next j
        
        sizecheck = fArray(compareFarray).storageList.Count
        ReDim arrayChecklist(sizecheck) As String
        For i = 1 To LCdatabase
            test = waterdata.Cells(3, i)
            If test Like "R??[0-9]*" Then '' issues here
        '' New addition below here
        If i = 229 Then
            Debug.Print "Error"
        End If
            
            
            
            
                If storagePointer < fArray(compareFarray).storageList.Count And storagePointer < sizecheck Then
                    If test = fArray(compareFarray).storageList(storagePointer) Then
                        Debug.Print "Inserting " & fArray(compareFarray).valueList(storagePointer) & "At:" & test
                        logfileWS.WriteLine "Inserting: " & fArray(compareFarray).valueList(storagePointer) & " At:" & test & " For:" & compareF
                        ''waterdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                        'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                            'storagePointer = storagePointer + 1
                                addflag = True
                        'End If
                
                    End If
                    If test > fArray(compareFarray).storageList(storagePointer) And storagePointer < sizecheck Then
                        Debug.Print "Creating New R Number and Insert: "; fArray(compareFarray).storageList(storagePointer); "For Fnumber:"; compareF
                        logfileWS.WriteLine "Creating New R Number and Insert: " & fArray(compareFarray).storageList(storagePointer) & " At:" & test & " For:" & compareF
                        ''waterdata.Columns(i).Insert
                        ''waterdata.Cells(3, i) = fArray(compareFarray).storageList(storagePointer)
                        ''waterdata.Cells(k, i) = fArray(compareFarray).valueList(storagePointer) * 1 / 100
                        'sizeincrease = sizeincrease + 1
                        'If storagePointer < fArray(compareFarray).storageList.Count - 1 Then
                        'storagePointer = storagePointer + 1
                        addflag = True
                    'End If
                    End If
                    If addflag = True Then
                        storagePointer = storagePointer + 1
                    
                    End If
                    addflag = False
                End If
            
                rnumbers = True
                If IsEmpty(waterdata.Cells(k, i)) = False And waterdata.Cells(k, i) <> " " And waterdata.Cells(k, i) <> "Yes" Then
                    compareR = waterdata.Cells(3, i)
                
                    'sumArray(counter) = waterdata.Cells(k, i + 1)
                    'counter = counter + 1
                    'sum = sum + wsdata.Cells(k, i)
                End If
                compareR = waterdata.Cells(3, i)
                If IsEmpty(waterdata.Cells(k, i)) = False And fArray(compareFarray).storageList.Contains(compareR) = False Then
                    Debug.Print "Deleting: " & waterdata.Cells(k, i) & "RNumber is outdated"; waterdata.Cells(3, i) & "For Fnumber:" & compareF
                    logfileWS.WriteLine "Deleting Value: " & waterdata.Cells(k, i) & " RNumber is outdated:" & waterdata.Cells(3, i) & " For Fnumber:" & compareF
                    ''waterdata.Cells(k, i) = ""
                    'IsNumeric(waterdata.Cells(k, i))
                End If
            
            
            
            
            
            
            
            
            
            'new addition above here
            End If
        
        Next i
        
skipFnumberWS:
Next k
  
    logfileWS.Close









 
End Sub




      

Function returnRange(ByRef dataSheet As Worksheet) As Range
'gets a range of the worksheet and stores it as currentRange

    Dim LR As Long, LC As Long
    Dim tempRange As Range
    LR = dataSheet.Cells(dataSheet.Rows.Count, 1).End(xlUp).Row
    LC = dataSheet.Cells(1, dataSheet.Columns.Count).End(xlToLeft).Column
    'Debug.Print LR & "Last Row"
    'Debug.Print LC & "Last Row"

    With dataSheet
        'Set tempRange = .Range(.Cells(1, 1), .Cells(LR, LC))
        Set tempRange = Range(dataSheet.Cells(1, 1), dataSheet.Cells(LR, LC))
    End With
    Set returnRange = tempRange

End Function


Function returnCount(dataSheet As Worksheet) As Long
'gets the amount of cells in the range of the worksheet empty cells included it does the math based off of the amount of 1st columns times the amount in the 1st row
    Dim LR As Long, LC As Long
    LR = dataSheet.Cells(dataSheet.Rows.Count, 1).End(xlUp).Row
    LC = dataSheet.Cells(1, dataSheet.Columns.Count).End(xlToLeft).Column
    returnCount = LR * LC

End Function

Sub printList(ByVal plist As Object)

    For i = 0 To plist.Count - 1
        Debug.Print plist(i); " ---DOES THIS PRINT IDIOT"
    Next i
End Sub

Function returnRValue(ByVal rlist As Object, ByVal vlist As Object, compare As String) As Double
    Dim index As Integer
    index = 404
    'index = rlist.IndexOf(compare, 0)

    If rlist.Contains(compare) Then
        index = rlist.IndexOf(compare, 0)
    End If
    Debug.Print "Function Index " & index

    If index = 404 Then
        returnRValue = 0

    Else
        returnRValue = vlist.Item(index)
    End If
End Function
